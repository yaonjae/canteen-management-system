// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id             Int      @id @default(autoincrement())
    name           String
    username       String   @unique
    password       String
    defaulPassword String   @default("Default123")
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@index([name])
}

model Cashier {
    id         Int      @id @default(autoincrement())
    first_name String
    last_name  String
    username   String   @unique
    password   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    Transaction Transaction[]
}

model Customer {
    id             Int      @id
    first_name     String
    last_name      String
    contact_number String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    Transaction   Transaction[]
    PaymentRecord PaymentRecord[]
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]
}

model Product {
    id          Int            @id @default(autoincrement())
    name        String
    amount      Float
    image_url   String
    category_id Int
    status      product_status
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    Category    Category       @relation(fields: [category_id], references: [id])
    Orders      Orders[]
}

model Orders {
    id             Int         @id @default(autoincrement())
    product_id     Int
    transaction_id Int
    quantity       Int
    Product        Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
    Transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}

model Transaction {
    id                Int                 @id @default(autoincrement())
    customer_id       Int?
    cashier_id        Int
    transaction_type  transaction_type
    total_cost        Float
    total_paid        Float
    is_fully_paid     Boolean
    Cashier           Cashier             @relation(fields: [cashier_id], references: [id], onDelete: Cascade)
    Customer          Customer?           @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    Orders            Orders[]
    PaymentRecordList PaymentRecordList[]
}

model PaymentRecordList {
    id                Int           @id @default(autoincrement())
    amount            Float
    payment_record_id Int
    transaction_id    Int
    Transaction       Transaction   @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
    Payment           PaymentRecord @relation(fields: [payment_record_id], references: [id], onDelete: Cascade)
}

model PaymentRecord {
    id              Int                 @id @default(autoincrement())
    customer_id     Int
    amount          Float
    createdAt       DateTime            @default(now())
    Customer        Customer            @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    TransactionPaid PaymentRecordList[]
}

enum product_status {
    AVAILABLE
    NOT_AVAILABLE
}

enum transaction_type {
    CASH
    CREDIT
}
